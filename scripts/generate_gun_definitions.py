#!/usr/bin/env python3
import json
from pathlib import Path

FORGE_GUNS = Path('../Just-Enough-Guns/src/generated/resources/data/jeg/guns')
OUTPUT = Path('src/main/java/ttv/migami/jeg/gun/GunDefinitions.java')


def rl(value: str | None) -> str:
    if not value:
        return 'null'
    if ':' not in value:
        raise ValueError(f'Missing namespace in {value}')
    namespace, path = value.split(':', 1)
    return f'ResourceLocation.fromNamespaceAndPath("{namespace}", "{path}")'


def format_float(value: float | None, default: float = 0.0) -> str:
    if value is None:
        value = default
    text = f"{value:.4f}"
    text = text.rstrip('0').rstrip('.')
    if text == '':
        text = '0'
    if text == '-0':
        text = '0'
    return text + 'F'


def format_int(value: int | None, default: int = 0) -> str:
    return str(value if value is not None else default)


def format_bool(value: bool | None) -> str:
    return 'true' if value else 'false'


def sanitize_rate(value: int | None) -> int:
    return max(1, value or 1)


def sanitize_reload(value: int | None) -> int:
    return max(0, value or 0)


def collect_guns():
    guns = []
    for json_path in sorted(FORGE_GUNS.glob('*.json')):
        gun_id = json_path.stem
        data = json.loads(json_path.read_text())
        general = data.get('general', {})
        projectile = data.get('projectile', {})
        reloads = data.get('reloads', {})
        sounds = data.get('sounds', {})

        entry = {
            'id': gun_id,
            'ammo_item': projectile.get('item'),
            'damage': projectile.get('damage', 0.0),
            'speed': projectile.get('speed', 0.0),
            'life': projectile.get('life', 60),
            'gravity': projectile.get('gravity', False),
            'headshot': projectile.get('headshotMultiplier', 1.0),
            'projectileAmount': general.get('projectileAmount', projectile.get('projectileAmount', 1)),
            'spread': general.get('spread', 0.0),
            'rate': sanitize_rate(general.get('rate')),
            'reloadType': reloads.get('reloadType', 'jeg:magazine'),
            'maxAmmo': reloads.get('maxAmmo', 1),
            'reloadTimer': sanitize_reload(reloads.get('reloadTimer')),
            'additionalReloadTimer': sanitize_reload(reloads.get('additionalReloadTimer')),
            'fireSound': sounds.get('fire'),
            'silencedFire': sounds.get('silencedFire'),
            'enchantedFire': sounds.get('enchantedFire'),
            'reloadStart': sounds.get('reloadStart'),
            'reloadLoad': sounds.get('reloadLoad'),
            'reloadEnd': sounds.get('reloadEnd'),
            'ejectorPull': sounds.get('ejectorPull'),
            'ejectorRelease': sounds.get('ejectorRelease'),
            'projectileSize': projectile.get('size', 0.05),
            'trailColor': projectile.get('trailColor', -1),
            'trailLengthMultiplier': projectile.get('trailLengthMultiplier', 1.0),
        }
        guns.append(entry)
    return guns


def generate_java():
    guns = collect_guns()
    OUTPUT.parent.mkdir(parents=True, exist_ok=True)
    with OUTPUT.open('w', encoding='utf-8') as out:
        out.write('// Auto-generated by scripts/generate_gun_definitions.py. Do not edit manually.\n')
        out.write('package ttv.migami.jeg.gun;\n\n')
        out.write('import java.util.Map;\n')
        out.write('import java.util.Set;\n')
        out.write('import java.util.LinkedHashMap;\n')
        out.write('import java.util.Collections;\n')
        out.write('import net.minecraft.resources.ResourceLocation;\n')
        out.write('import ttv.migami.jeg.Reference;\n\n')
        out.write('public final class GunDefinitions {\n')
        out.write('    private GunDefinitions() {}\n\n')
        out.write('    public static final Map<ResourceLocation, GunStats> ALL;\n')
        out.write('    public static final Set<ResourceLocation> IDS;\n\n')
        out.write('    static {\n')
        out.write('        Map<ResourceLocation, GunStats> map = new LinkedHashMap<>();\n')
        for entry in guns:
            rl_id = f'ResourceLocation.fromNamespaceAndPath(Reference.MOD_ID, "{entry["id"]}")'
            params = [
                rl_id,
                rl(entry['ammo_item']) if entry['ammo_item'] else 'null',
                f'"{entry["reloadType"]}"',
                format_int(entry['maxAmmo'], 1),
                format_int(entry['reloadTimer'], 20),
                format_int(entry['additionalReloadTimer'], 0),
                format_int(entry['rate'], 3),
                format_float(entry['damage'], 1.0),
                format_float(entry['speed'], 5.0),
                format_int(entry['life'], 60),
                format_bool(entry['gravity']),
                format_float(entry['spread'], 0.0),
                format_float(entry['headshot'], 1.0),
                format_int(entry['projectileAmount'], 1),
                rl(entry['fireSound']) if entry['fireSound'] else 'null',
                rl(entry['silencedFire']) if entry['silencedFire'] else 'null',
                rl(entry['enchantedFire']) if entry['enchantedFire'] else 'null',
                rl(entry['reloadStart']) if entry['reloadStart'] else 'null',
                rl(entry['reloadLoad']) if entry['reloadLoad'] else 'null',
                rl(entry['reloadEnd']) if entry['reloadEnd'] else 'null',
                rl(entry['ejectorPull']) if entry['ejectorPull'] else 'null',
                rl(entry['ejectorRelease']) if entry['ejectorRelease'] else 'null',
                format_float(entry['projectileSize'], 0.05),
                format_int(entry['trailColor'], -1),
                format_float(entry['trailLengthMultiplier'], 1.0)
            ]
            out.write(f'        map.put({rl_id}, new GunStats(' + ', '.join(params) + '));\n')
        out.write('        ALL = Collections.unmodifiableMap(map);\n')
        out.write('        IDS = ALL.keySet();\n')
        out.write('    }\n')
        out.write('}\n')

if __name__ == '__main__':
    generate_java()
